name: 'Publish Package to GitHub Packages'
description: 'Builds and publishes package to GitHub Packages with version checking'
author: 'chengzao'

inputs:
  token:
    description: 'GitHub token for publishing to GitHub Packages'
    required: true
  registry:
    description: 'Package registry URL'
    required: false
    default: 'npm.pkg.github.com'
  scope:
    description: 'Package scope (e.g., @your-org)'
    required: true

outputs:
  package_name:
    description: 'The name of the published package'
    value: ${{ steps.publish.outputs.package_name }}
  package_version:
    description: 'The version of the published package'
    value: ${{ steps.publish.outputs.package_version }}
  publish_success:
    description: 'Whether the package was published successfully'
    value: ${{ steps.publish.outputs.publish_success }}
  skip_publish:
    description: 'Whether the publish was skipped due to existing version'
    value: ${{ steps.publish.outputs.skip_publish }}

runs:
  using: 'composite'
  steps:
    - name: Validate Node.js environment
      run: |
        echo ""
        if ! command -v node &> /dev/null; then
          echo "‚ùå Node.js is not installed or not in PATH"
          exit 1
        fi

        if ! command -v npm &> /dev/null; then
          echo "‚ùå npm is not installed or not in PATH"
          exit 1
        fi

        echo "‚úÖ Node.js environment validation passed"
        echo "üì¶ Node.js version: $(node --version)"
        echo "üì¶ npm version: $(npm --version)"
      shell: bash

    - name: Creating .npmrc
      run: |
        echo ""
        rm -rf .npmrc
        cat << EOF > "$HOME/.npmrc"
          ${INPUT_SCOPE}:registry=https://${INPUT_REGISTRY}
          //${INPUT_REGISTRY}/:_authToken=$GITHUB_TOKEN
        EOF
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        INPUT_SCOPE: ${{ inputs.scope }}
        INPUT_REGISTRY: ${{ inputs.registry }}

    - name: Publish to Github Packages
      id: publish
      run: |
        echo ""
        # Cleanup function to remove .npmrc
        cleanup() {
          rm -f "$HOME/.npmrc" 2>/dev/null || true
        }

        # Set trap to ensure cleanup runs on script exit
        trap cleanup EXIT

        # Get package version and name from package.json
        PUBLISH_VERSION=$(node -p "require('./package.json').version" 2>/dev/null)
        PACKAGE_NAME=$(node -p "require('./package.json').name" 2>/dev/null)

        # Validate package.json exists and has required fields
        if [ -z "$PUBLISH_VERSION" ] || [ -z "$PACKAGE_NAME" ]; then
          echo "‚ùå package.json not found or missing required fields"
          exit 1
        fi

        echo "üì¶ Publishing package: $PACKAGE_NAME"
        echo "üè∑Ô∏è Version: $PUBLISH_VERSION"
        echo "üåê Registry: https://$INPUT_REGISTRY"

        # ËÆæÁΩÆÂü∫Êú¨ËæìÂá∫ÂèÇÊï∞
        echo "package_name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"
        echo "package_version=$PUBLISH_VERSION" >> "$GITHUB_OUTPUT"
        
        # Check if npm package version already exists
        if npm view "$PACKAGE_NAME@$PUBLISH_VERSION" --registry="https://$INPUT_REGISTRY" --json >/dev/null 2>&1; then
          echo "‚ö†Ô∏è Version $PUBLISH_VERSION already exists, skipping publish"
          echo "üì¶ Package: $PACKAGE_NAME"
          echo "üè∑Ô∏è Version: $PUBLISH_VERSION"
          echo "üåê Registry: https://$INPUT_REGISTRY"
          echo "publish_success=false" >> "$GITHUB_OUTPUT"
          echo "skip_publish=true" >> "$GITHUB_OUTPUT"
        else
          echo "üöÄ Publishing to registry..."
          if npm publish --registry="https://$INPUT_REGISTRY"; then
            echo "‚úÖ Successfully published!"
            echo "üì¶ Package: $PACKAGE_NAME"
            echo "üè∑Ô∏è Version: $PUBLISH_VERSION"
            echo "üåê Registry: https://$INPUT_REGISTRY"
            echo "publish_success=true" >> "$GITHUB_OUTPUT"
            echo "skip_publish=false" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Publish failed!"
            echo "üì¶ Package: $PACKAGE_NAME"
            echo "üè∑Ô∏è Version: $PUBLISH_VERSION"
            echo "üåê Registry: https://$INPUT_REGISTRY"
            echo "publish_success=false" >> "$GITHUB_OUTPUT"
            echo "skip_publish=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi
        fi
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        INPUT_REGISTRY: ${{ inputs.registry }}